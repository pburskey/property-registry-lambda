AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: property_configuration


Metadata:
  AWS::ServerlessRepo::Application:
    Name: realworld-serverless-application-backend-api
    Description: >-
      This template creates API Gateway and Lambda resources for the backend service.
    Author: Patrick Burskey
    SpdxLicenseId: Apache-2.0
    Labels: [ github, serverless, sam ]
    HomePageUrl: https://github.com/pburskey/property-registry-lambda
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/pburskey/property-registry-lambda
    #    LicenseUrl: ../../../LICENSE
    ReadmeUrl: README.md


Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    Default: 'dev'
    AllowedValues:
      - dev
      - stage
      - prod

Conditions:
  IsProd:
    !Equals [ !Ref Stage, "prod" ]
  IsDev:
    Fn::Equals:
      - 'dev'
      - !Ref Stage



Globals:
  Function:
    Runtime: java17
    MemorySize: 512
    Timeout: 3
    Environment:
      Variables:
        PROPERTY_TABLE: !Ref PropertyTable
        STAGE: !Ref Stage

Resources:
  PropertyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "category"
          AttributeType: "S"
        -
          AttributeName: "name"
          AttributeType: "S"
        -
          AttributeName: "value"
          AttributeType: "S"
        -
          AttributeName: "description"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "category"
          KeyType: "HASH"
        -
          AttributeName: "name"
          KeyType: "RANGE"
#      GlobalSecondaryIndexes:
#        -
#          IndexName: "GSI"
#          KeySchema:
#            -
#              AttributeName: "TicketSales"
#              KeyType: "HASH"
#          Projection:
#            ProjectionType: "KEYS_ONLY"
#          ProvisionedThroughput:
#            ReadCapacityUnits: 5
#            WriteCapacityUnits: 5


  PipelineStartBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-start

  FanOutTopic:
    Type: AWS::SNS::Topic

  BasicAWSApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: Basic AWS Api Gateway
      Description: Basic AWS Api Gateway
      OpenApiVersion: 3.0.1
      StageName: !Ref Stage
      DisableExecuteApiEndpoint: false


#  PropertyCompositeLambda:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: target/lambda.zip
#      FunctionName: PropertyCompositeLambda
#      Handler: com.burskey.property.api.CompositeCrudHandler::handleRequest
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref PropertyTable
#      Events:
#        ApiEvents:
#          Type: Api
#          Properties:
#            RestApiId: !Ref BasicAWSApiGateway
#            Path: /composite/{proxy+}
#            Method: ANY


  PropertySaveLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda.zip
      FunctionName: PropertySaveLambda
      Handler: com.burskey.property.api.Save::handleRequest
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PropertyTable
      Events:
        ApiEvents:
          Type: Api
          Properties:
            RestApiId: !Ref BasicAWSApiGateway
            Path: /save
            Method: POST

  PropertyFindByIDLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda.zip
      FunctionName: PropertyFindByIDLambda
      Handler: com.burskey.property.api.GetByID::handleRequest
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PropertyTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref BasicAWSApiGateway
            Path: /{id}
            Method: get
            RequestParameters:
              - method.request.path.id:
                  Required: true
                  Caching: false

  PropertyFindByNameCategoryLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda.zip
      FunctionName: PropertyFindByNameCategoryLambda
      Handler: com.burskey.property.api.GetByNameCategory::handleRequest
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PropertyTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref BasicAWSApiGateway
            Path: /find
            Method: get
            RequestParameters:
              - method.request.querystring.name:
                  Required: false
                  Caching: false
              - method.request.querystring.category:
                  Required: false
                  Caching: false

  SingleEventLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda.zip
      FunctionName: SingleEventLambda
      Handler: com.burskey.property.api.SNSEventHandler::handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PropertyTable
      Events:
        SnsEvent:
          Type: SNS
          Properties:
            Topic: !Ref FanOutTopic

  S3EventLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda.zip
      FunctionName: S3EventLambda
      Handler: com.burskey.property.api.S3EventsHandler::handler
      Environment:
        Variables:
          FAN_OUT_TOPIC: !Ref FanOutTopic
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-start
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt FanOutTopic.TopicName
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref PipelineStartBucket
            Events: s3:ObjectCreated:*


Outputs:
  BasicAWSApiGateway:
    Description: 'API Gateway endpoint URL for stage: ${Stage} for Hello World function'
    Value: !Sub 'https://${BasicAWSApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
  BasicAWSApiGatewayRestApiId:
    Description: 'API Gateway ARN for Basic AWS API Gateway'
    Value: !Ref BasicAWSApiGateway
    Export:
      Name: BasicAWSApiGateway-RestApiId
  BasicAWSApiGatewayRootResourceId:
    Value: !GetAtt BasicAWSApiGateway.RootResourceId
    Export:
      Name: BasicAWSApiGateway-RootResourceId